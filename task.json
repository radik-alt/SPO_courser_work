{
  "tasks": [
    {
      "list_info_task": [
        {
          "title": "Сделать первый коммит",
          "info": [
            "Коммит в git репозитории хранит снимок всех файлов в директории. Почти как огромная копия, только лучше\n\nGit пытается быть лёгким и быстрым насколько это только возможно, так что он не просто слепо копирует всю директорию каждый раз, а ужимает (когда это возможно) коммит в набор изменений или «дельту» между текущей версией и предыдущей.\n\nТакже Git хранит всю историю о том, когда какой коммит был сделан. Вот почему большинство коммитов имеют предков - мы указываем на предков стрелками при визуализации. Поддержка истории коммитов более чем важна для всех, кто работает над проектом!\n\nМожно ещё долго рассказывать о коммитах, но для простоты будем считать их полными снимками проекта. Коммиты очень легки, так что переключение между ними происходит предельно быстро!",
            "Пора попробовать! После того, как это окно закроется, сделай два коммита, чтобы пройти этот уровень.\n\n"
          ]
        }
      ],
      "solve": false
    },
    {
      "list_info_task": [
        {
          "title": "Ветвление в Git",
          "info": [
            "Ветки в Git, как и коммиты, невероятно легковесны. Это просто ссылки на определённый коммит — ничего более. Вот почему многие фанаты Git повторяют мантру \n\n Так как создание множества веток никак не отражается на памяти или жестком диске, удобнее и проще разбивать свою работу на много маленьких веток, чем хранить все изменения в одной огромной ветке.\n\nЧуть позже мы попробуем использовать ветки и коммиты, и вы увидите, как две эти возможности сочетаются. Можно сказать, что созданная ветка хранит изменения текущего коммита и всех его родителей.",
            "Сообщим Git, что хотим выбрать ветку\n\ngit checkout [name]\nЭта команда перенесёт нас на новую ветку в момент, когда мы ещё не коммитили изменения",
            "Ну что ж, теперь ты готов к работе с ветками. Как только это окно закроется, создай ветку с именем bugFix и переключись на неё.\n\nКстати вот тебе совет, ты можешь создать новую ветку и переключиться на неё с помощью одной команды: git checkout -b [yourbranchname]."
          ]
        }
      ],
      "solve": false
    },
    {
      "list_info_task": [
        {
          "title": "Ветки и слияния",
          "info": [
            "Ок! Мы уже знаем, как создавать ветки и коммитить наши изменения. Теперь надо понять, как объединять изменения из двух разных веток. Очень удобно создать ветку, сделать свою часть работы в ней и потом объединить изменения из своей ветки с общими.\n\nПервый способ объединения изменений, который мы рассмотрим - это git merge - слияние или просто мердж. Слияния в Git создают особый вид коммита, который имеет сразу двух родителей. Коммит с двумя родителями обычно означает, что мы хотим объединить изменения из одного коммита с другим коммитом и всеми их родительскими коммитами.\n\nСлишком запутанно =) На схеме всё проще и понятнее.\n\n",
            "Чтобы пройти этот уровень, сделай следующее:\n\nСоздай новую ветку под названием bugFix\n\nПереключись на новую ветку bugFix командой git checkout bugFix\n\nСделай один коммит\n\nВернись на ветку main при помощи git checkout\n\nСделай ещё один коммит\n\nСлей ветку bugFix с веткой main при помощи git merge"
          ]
        }
      ],
      "solve": false
    },
    {
      "list_info_task": [
        {
          "title": "Git Rebase",
          "info": [
            "Второй способ объединения изменений в ветках - это rebasing. При ребейзе Git по сути копирует набор коммитов и переносит их в другое место.\n\nНесмотря на то, что это звучит достаточно непонятно, преимущество rebase в том, что c его помощью можно делать чистые и красивые линейные последовательности коммитов. История коммитов будет чище, если вы применяете rebase.",
            "Чтобы пройти этот уровень, сделай следующее:\n\nПереключись на ветку bugFix\nСделай коммит\nВернись на main и сделай коммит ещё раз\nПереключись на bugFix и сделай rebase на main\nУдачи!"
          ]
        }
      ],
      "solve": false
    }
  ]
}